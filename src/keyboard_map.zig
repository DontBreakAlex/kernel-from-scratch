pub const Key = enum(u7) {
    UNKNOWN,
    ESC,
    F1,
    F2,
    F3,
    F4,
    F5,
    F6,
    F7,
    F8,
    F9,
    F10,
    F11,
    F12,
    PRINT_SCREEN,
    SCROLL_LOCK,
    PAUSE,
    BACKTICK,
    ONE,
    TWO,
    THREE,
    FOUR,
    FIVE,
    SIX,
    SEVEN,
    EIGHT,
    NINE,
    ZERO,
    HYPHEN,
    EQUALS,
    BACKSPACE,
    TAB,
    Q,
    W,
    E,
    R,
    T,
    Y,
    U,
    I,
    O,
    P,
    LEFT_BRACKET,
    RIGHT_BRACKET,
    ENTER,
    CAPS_LOCK,
    A,
    S,
    D,
    F,
    G,
    H,
    J,
    K,
    L,
    SEMICOLON,
    APOSTROPHE,
    HASH,
    LEFT_SHIFT,
    BACKSLASH,
    Z,
    X,
    C,
    V,
    B,
    N,
    M,
    COMMA,
    DOT,
    FORWARD_SLASH,
    RIGHT_SHIFT,
    LEFT_CTRL,
    SPECIAL,
    LEFT_ALT,
    SPACE,
    RIGHT_ALT,
    FN,
    SPECIAL2,
    RIGHT_CTRL,
    INSERT,
    HOME,
    PAGE_UP,
    DELETE,
    END,
    PAGE_DOWN,
    LEFT_ARROW,
    UP_ARROW,
    DOWN_ARROW,
    RIGHT_ARROW,
    NUM_LOCK,
    KEYPAD_SLASH,
    KEYPAD_ASTERISK,
    KEYPAD_MINUS,
    KEYPAD_7,
    KEYPAD_8,
    KEYPAD_9,
    KEYPAD_PLUS,
    KEYPAD_4,
    KEYPAD_5,
    KEYPAD_6,
    KEYPAD_1,
    KEYPAD_2,
    KEYPAD_3,
    KEYPAD_ENTER,
    KEYPAD_0,
    KEYPAD_DOT,

    pub fn toAscii(
        self: Key,
    ) ?u8 {
        return switch (self) {
            .BACKSPACE => 0x08,
            .TAB => 0x09,
            .ENTER => 0x0A,
            .SPACE => 0x20,
            .COMMA => 0x2C,
            .HYPHEN => 0x2D,
            .DOT => 0x2E,
            .FORWARD_SLASH => 0x2F,
            .ZERO => 0x30,
            .ONE => 0x31,
            .TWO => 0x32,
            .THREE => 0x33,
            .FOUR => 0x34,
            .FIVE => 0x35,
            .SIX => 0x36,
            .SEVEN => 0x37,
            .EIGHT => 0x38,
            .NINE => 0x39,
            .SEMICOLON => 0x3B,
            .EQUALS => 0x3D,
            .LEFT_BRACKET => 0x5B,
            .BACKSLASH => 0x5C,
            .RIGHT_BRACKET => 0x5D,
            .BACKTICK => 0x60,
            .A => 0x61,
            .B => 0x62,
            .C => 0x63,
            .D => 0x64,
            .E => 0x65,
            .F => 0x66,
            .G => 0x67,
            .H => 0x68,
            .I => 0x69,
            .J => 0x6A,
            .K => 0x6B,
            .L => 0x6C,
            .M => 0x6D,
            .N => 0x6E,
            .O => 0x6F,
            .P => 0x70,
            .Q => 0x71,
            .R => 0x72,
            .S => 0x73,
            .T => 0x74,
            .U => 0x75,
            .V => 0x76,
            .W => 0x77,
            .X => 0x78,
            .Y => 0x79,
            .Z => 0x7A,
            else => null,
        };
    }
};

pub const map = [128]Key{
    .UNKNOWN,
    .ESC,
    .ONE,
    .TWO,
    .THREE,
    .FOUR,
    .FIVE,
    .SIX,
    .SEVEN,
    .EIGHT,
    .NINE,
    .ZERO,
    .HYPHEN,
    .EQUALS,
    .BACKSPACE,
    .TAB,
    .Q,
    .W,
    .E,
    .R,
    .T,
    .Y,
    .U,
    .I,
    .O,
    .P,
    .LEFT_BRACKET,
    .RIGHT_BRACKET,
    .ENTER,
    .LEFT_CTRL,
    .A,
    .S,
    .D,
    .F,
    .G,
    .H,
    .J,
    .K,
    .L,
    .SEMICOLON,
    .APOSTROPHE,
    .BACKTICK,
    .LEFT_SHIFT,
    .BACKSLASH,
    .Z,
    .X,
    .C,
    .V,
    .B,
    .N,
    .M,
    .COMMA,
    .DOT,
    .FORWARD_SLASH, // or numpad slash if preceded by keycode 224
    .RIGHT_SHIFT,
    .KEYPAD_ASTERISK,
    .LEFT_ALT,
    .SPACE,
    .CAPS_LOCK,
    .F1,
    .F2,
    .F3,
    .F4,
    .F5,
    .F6,
    .F7,
    .F8,
    .F9,
    .F10,
    .NUM_LOCK,
    .SCROLL_LOCK,
    .KEYPAD_7, // HOME key if preceded by keycode 224
    .KEYPAD_8, // up arrow if preceded by keycode 224
    .KEYPAD_9, // PAGE UP key if preceded by keycode 224
    .KEYPAD_MINUS,
    .KEYPAD_4, // left arrow if preceded by keycode 224
    .KEYPAD_5,
    .KEYPAD_6, // right arrow if preceded by keycode 224
    .KEYPAD_PLUS,
    .KEYPAD_1, // END key if preceded by keycode 224
    .KEYPAD_2, // down arrow if preceded by keycode 224
    .KEYPAD_3, // PAGE DOWN key if preceded by keycode 224
    .KEYPAD_0, // INSERT key if preceded by keycode 224
    .KEYPAD_DOT, // DELETE key if preceded by keycode 224
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .F11,
    .F12,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
    .UNKNOWN,
};
